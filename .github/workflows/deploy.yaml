# Setup steps performed before the deployment process
# 1. Create an Artifact Registry to store and manage Docker images.
# 2. Create an index.js file with two endpoints: one returning "hello" and the other returning "work".
# 3. Create a Dockerfile to define the environment and build instructions for the Docker image.
# 4. Create a .dockerignore file to exclude unnecessary files from the Docker build context.
# 5. Create a Service Account to authenticate Google Cloud Platform (GCP) with GitHub.
# 6. Generate a JSON key for the Service Account, download it, and add it to GitHub Secrets.
# 7. Inside the root folder, create a .github folder; within .github, create a workflows folder; and inside the workflows folder, create a .yaml file.
# 8. ...or create a new repository on the command line
#    echo "# cicd" >> README.md
#    git init
#    git add README.md
#    git commit -m "first commit"
#    git branch -M main
#    git remote add origin https://github.com/bikram-singh/Deploy-Nodejs-App-to-Cloudrun-GitHub-Actions.git
#    git push -u origin main
#    ...or push an existing repository from the command line
#    git remote add origin https://github.com/bikram-singh/Deploy-Nodejs-App-to-Cloudrun-GitHub-Actions.git
#    git branch -M main
#    git push -u origin main

name: Deploy Nodejs to Cloud Run using Github Actions

# Defines the name of the GitHub Actions workflow for deploying a Node.js app to Google Cloud Run

on:
  push:
    branches:
      - main
      
# Triggers the workflow on push events to the 'main' branch

env:
  PROJECT_ID: github-actions-111
  SERVICE_NAME: my-app
  REGION: us-central1
  REPOSITORY_NAME: my-app-repo
  IMAGE_NAME: node
  
# Sets environment variables for the project ID, service name, region, repository name, and image name

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      
    # Defines a job named 'deploy' that runs on the latest Ubuntu environment
    # Grants read permissions for contents and write permissions for ID tokens

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
        # Checks out the repository code to the runner

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
        # Authenticates to Google Cloud Platform using a service account key stored as a secret

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
        
        # Sets up Docker Buildx for building and pushing Docker images

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
        
        # Configures Docker to authenticate with Google Container Registry in the specified region

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest
          
        # Builds a Docker image with the specified tag and pushes it to the Google Container Registry

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --no-allow-unauthenticated # Set to --no-allow-unauthenticated for private access
            
        # Deploys the Docker image to Google Cloud Run with the specified service name, region, and private access settings
